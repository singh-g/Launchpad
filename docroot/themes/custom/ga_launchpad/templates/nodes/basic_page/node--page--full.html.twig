{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}

<article{{ attributes }}>
  <div{{ content_attributes }}>
    {#{{ content }}#}

    {% set subtitle %}
      {{ content.field_sub_title }}
    {% endset %}

    {# Field: field_text #}
    {% set text %}
      {{ content.field_text }}
    {% endset %}

    {# Field: field_button #}
    {% set button %}
      {{ content.field_button }}
    {% endset %}

    {# Field: field_images #}
    {% set image %}
      {{ content.field_images }}
    {% endset %}
    {# Image SRC to be used as background #}
    {% set imageSrc = file_url(content.field_images[0]['#media'].field_media_image.entity.uri.value) %}

    {# Field: field_content #}
    {% set paragraphs %}
      {{ content.field_content }}
    {% endset %}

    {# Setting hero class depenfing on text and subtitle fields #}
    {% set textEntity = content.field_text.0 %}
    {% set textEmpty = textEntity['#text'] is empty %}
    {% set subtitleEntity = content.field_sub_title.0 %}
    {% set subtitletEmpty = subtitleEntity['#context']['value'] is empty %}
    {% if textEmpty and subtitletEmpty %}
        {% set herostyle = "hero--title-only" %}
    {% elseif textEmpty %}
      {% set herostyle = "hero--no-text" %}
    {% elseif subtitletEmpty %}
      {% set herostyle = "hero--no-subtitle" %}
    {% else %}
      {% set herostyle = "hero--full" %}
    {% endif %}

    <div class="hero {{ herostyle }}">
      <div class="hero__content">
        <div class="hero__background">
          <div class="hero__content__inner">
            {% if content.field_sub_title|render %}
              <div class="hero__subtitle">
                {{ subtitle }}
              </div>
            {% endif %}

            {{ title_prefix }}
              {% if label %}
                <div class="hero__title">
                  <h1{{ title_attributes }}>{{ label }}</h1>
                </div>
              {% endif %}
            {{ title_suffix }}

            {% if display_submitted %}
              <footer>
                {{ author_picture }}
                <div{{ author_attributes }}>
                  {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
                  {{ metadata }}
                </div>
              </footer>
            {% endif %}
          </div>
        </div>

        {% if content.field_text|render %}
          <div class="hero__text">
            {{ text }}
          </div>
        {% endif %}
        {{ button }}
      </div>
       <div class="hero__background-image" style="min-height: 300px; min-width: 400px; background-image: url({{ imageSrc }});"></div>
    </div>
    {{ paragraphs }}
  </div>

</article>
